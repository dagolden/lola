=pod

=for comment
DO NOT EDIT. This Pod was generated by Swim.
See http://github.com/ingydotnet/swim-pm#readme

=encoding utf8

=head1 Lola Specification

Lola is the "B<Lo>cal-B<La>nguage Environment Manager". This is a working
specification and design document.

=head1 Goals

=over

=item * Lola is essentially plenv for all programming languages.

=item * Lola also deals with packages (modules/libraries) in a like manner.

=item * Lola (the core) is written entirely in Bash.

=over

=item * It I<can> invoke components written in other languages.

=back

=item * Lola is based on the B<shim> architecture.

=over

=item * Every binary has a shim script that proxies to a real binary.

=back

=item * Lola environments are based on:

=over

=item * Shell specific settings

=item * Cwd settings

=item * Global settings

=back

=item * Lola can build language runtimes and packages from source

=over

=item * Binary installs will be supported as possible

=back

=back

Some more thoughts on these goals.

C<plenv> (and its shim style) has proven to be more reliable than C<perlbrew>.
C<plenv> is a direct copy of C<rbenv> and that has shown to be usable in many
languages. Lola takes this to a natural conclusion of one tool for managing
locally installed languages in a consistent manner.

People use separate tools for managing packages. Perlbrew + locallib, NVM +
NPM, etc. The management of both share the same concerns. Combining them can
multiply the power of a such a tool. For instance:

    lola run p5=5.18.1 pkg=dzil make test

Lola stores settings in 3 places: environment variables, C<.lola> directories,
and the $LOLA_ROOT directory. Shims look in those places in that order. The
C<.lola> directory search starts with $PWD and works towards C</>. Things in
C<LOLA_ROOT> are considered B<global> settings.

Packages get installed under LOLA_ROOT into named I<pkg-sets> and the
current pkg-set for a language is set in the same ways as the current
language runtime.

=head1 Project Bootstrapping

Interested people should convene in IRC on irc.freenode.net#locallang.

Existing projects to look at and borrow ideas from are:

=over

=item * L<https://github.com/sstephenson/rbenv>

=item * L<https://github.com/tokuhirom/plenv>

=item * L<https://github.com/ingydotnet/git-hub>

=back

We should pick a language to start with, based on the people involved and
their expertise. Perl and/or Ruby seem like decent candidates. We should
probably co-opt the language installer components outright, as these might be
the more difficult parts. Also the package installers like C<cpanm> should
probably always be wrapped, as they are highly language specific. We just want
to introduce the concept of swappable pkg-sets.

=cut
