#------------------------------------------------------------------------------
# Lola -- The Local Language Manager
# Copyright 2013 Ingy dÃ¶t Net
#
#   LOLA_SRC/bin/lola-init*
#
# This file initializes the Lola commandline environment for your shell.
# You use it by adding a line like this:
#
#   source /path/to/lola/bin/lola-init
#
# to your .bashrc or .zshrc startup file.
#
# If you want a custom Lola root directory (where languages are installed),
# then add this line instead:
#
#   LOLA_ROOT=/path/to/root source /path/to/lola/bin/lola-init
#
# See $LOLA_SRC/readme.md for more information.
#
# XXX Only Bash is supported in this extremely early stage of development.
#------------------------------------------------------------------------------

LOLA_OK=true
if [ -n "$BASH_SOURCE" ]; then
  if [ "$0" == "${BASH_SOURCE[0]}" ]; then
    echo "Don't *run* lola-init, *source* it." >&2
    exit 1
  fi
else
  echo "Lola ony supports Bash at this time. Patches welcome!" >&2
  unset LOLA_OK
fi

lola_init_main() {
  unset LOLA_OK
  # Get absolute path of lola source code directory, make sure it checks out,
  # then export it. This is the value that everything keys off of:
  if [ "$0" == "${BASH_SOURCE[0]}" ]; then
    echo "Don't *run* lola-init, *source* it." >&2
    return 1
  fi
  local src="${BASH_SOURCE[0]}"
  if [ "$src" == 'bin/lola-init' ]; then
    src=./bin/lola-init
  fi
  if [[ ! "$src" =~ /bin/lola-init$ ]]; then
    echo "Invalid path "$src" for lola-init"
    return 1
  fi
  local lola_src="$(cd ${src%/bin/lola-init}; echo $PWD)"
  # Sanity check
  if [ ! -e "$lola_src/lib/lola.bash" ]; then
    echo "Invalid path for LOLA_SRC='$lola_src'" >&2
    return 1
  fi
  export LOLA_SRC="$lola_src"

  # We also need LOLA_ROOT. If the user did not set their own, we use
  # $HOME/.lola/ as the default:
  export LOLA_ROOT="${LOLA_ROOT:="$HOME/.lola"}"

  # Define the actual main `lola` command as a shell function:
  lola() {
    # Set up a file for Lola to put shell specific settings in:
    lola_env_file="$LOLA_ROOT/tmp/lola-env-$$"
    # Make sure it isn't a leftover.
    rm -f "$lola_env_file"

    # Call the actual Lola command executable.
    "$LOLA_SRC/bin/lola-cmd" "$@"
    local rc=$?

    # If command OK and ENV file exists, then source it into our shell:
    if [ $rc -eq 0 ]; then
      if [ -e "$lola_env_file" ]; then
        # WARNING This is effectively an 'eval' so we need to think about the
        # security implications.
        source "$lola_env_file"
        rm -f "$lola_env_file"
      fi
    fi

    # Return with proper status code
    return $rc
  }
}

[ -n "$LOLA_OK" ] && lola_init_main "$@"
# vim: set sw=2 ft=sh:
